# simulacao_esp32_mqtt.py
# Simula√ß√£o da coleta de dados de vibra√ß√£o com ESP32 e envio via MQTT
# Projeto: Challenge Reply ‚Äì Preven√ß√£o de Falhas em Motores Industriais (Grupo 13 - FIAP)

import random
import time
import paho.mqtt.client as mqtt
import json
import datetime

# Configura√ß√µes do broker MQTT p√∫blico
broker = "test.mosquitto.org"
port = 1883
topic = "fiap/desafio/vibracao"

# Cria cliente MQTT e configura os callbacks
client = mqtt.Client()

# Callback para conex√£o
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ Conectado ao broker MQTT com sucesso!")
    else:
        print(f"‚ùå Falha na conex√£o. C√≥digo de retorno: {rc}")

# Callback para publica√ß√£o
def on_publish(client, userdata, mid):
    print(f"üì§ Mensagem publicada com sucesso. ID: {mid}")

client.on_connect = on_connect
client.on_publish = on_publish

# Conecta ao broker MQTT
client.connect(broker, port)
client.loop_start()

print("üöÄ Iniciando simula√ß√£o de envio de dados de vibra√ß√£o...\n(Pressione CTRL+C para encerrar)\n")

try:
    while True:
        # Gera um valor aleat√≥rio de vibra√ß√£o (em mm/s)
        vibracao = round(random.uniform(0.2, 4.5), 2)
        timestamp = datetime.datetime.now().isoformat()

        # Cria a mensagem no formato JSON
        mensagem = json.dumps({
            "vibracao": vibracao,
            "timestamp": timestamp
        })

        # Publica a mensagem no t√≥pico MQTT
        result = client.publish(topic, mensagem)
        status = result.rc

        if status == mqtt.MQTT_ERR_SUCCESS:
            print(f"üì° Enviado para {topic}: {mensagem}")
        else:
            print("‚ö†Ô∏è Falha ao enviar a mensagem.")

        # Aguarda 5 segundos antes de enviar novamente
        time.sleep(5)

except KeyboardInterrupt:
    print("\nüõë Simula√ß√£o encerrada manualmente.")
except Exception as e:
    print(f"‚ùó Erro durante a simula√ß√£o: {e}")
finally:
    client.loop_stop()
    client.disconnect()
    print("üîå Conex√£o com o broker encerrada.")
