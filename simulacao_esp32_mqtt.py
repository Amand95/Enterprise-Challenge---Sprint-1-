import random
import time
import json
import datetime
import paho.mqtt.client as mqtt

# Configura√ß√µes do broker MQTT p√∫blico
broker = "test.mosquitto.org"
port = 1883
topic = "fiap/desafio/vibracao"

# Fun√ß√£o de callback para quando a conex√£o for estabelecida
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ Conectado ao broker MQTT com sucesso!")
    else:
        print(f"‚ùå Falha na conex√£o. C√≥digo de retorno: {rc}")

# Fun√ß√£o de callback para quando a mensagem for publicada com sucesso
def on_publish(client, userdata, mid):
    print(f"üì§ Mensagem publicada com sucesso. ID: {mid}")

# Fun√ß√£o para configurar e conectar o cliente MQTT
def connect_mqtt():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_publish = on_publish
    try:
        client.connect(broker, port)
        client.loop_start()  # Inicia o loop do cliente MQTT
        return client
    except Exception as e:
        print(f"‚ùó Erro ao conectar ao broker: {e}")
        return None

# Fun√ß√£o para gerar e enviar dados de vibra√ß√£o
def send_vibration_data(client):
    print("üöÄ Iniciando simula√ß√£o de envio de dados de vibra√ß√£o...\n(Pressione CTRL+C para encerrar)\n")
    
    try:
        while True:
            # Gera um valor aleat√≥rio de vibra√ß√£o (em mm/s)
            vibracao = round(random.uniform(0.2, 4.5), 2)
            timestamp = datetime.datetime.now().isoformat()

            # Cria a mensagem em formato JSON
            mensagem = json.dumps({
                "vibracao": vibracao,
                "timestamp": timestamp
            })
            
            # Publica a mensagem no t√≥pico MQTT
            result = client.publish(topic, mensagem)
            status = result.rc  # Verifica o status da publica√ß√£o
            if status == mqtt.MQTT_ERR_SUCCESS:
                print(f"üì° Enviado para {topic}: {mensagem}")
            else:
                print("‚ö†Ô∏è Falha ao enviar a mensagem.")

            # Aguarda 5 segundos antes de enviar novamente
            time.sleep(5)

    except KeyboardInterrupt:
        print("\nüõë Simula√ß√£o encerrada manualmente.")
    except Exception as e:
        print(f"‚ùó Erro durante a simula√ß√£o: {e}")
    finally:
        # Finaliza a conex√£o com o broker
        client.loop_stop()
        client.disconnect()
        print("üîå Conex√£o com o broker encerrada.")

# Fun√ß√£o principal para iniciar a simula√ß√£o
def main():
    client = connect_mqtt()
    if client:
        send_vibration_data(client)
    else:
        print("Falha na conex√£o com o broker MQTT. A simula√ß√£o n√£o foi iniciada.")

# Executa o script principal
if __name__ == "__main__":
    main()
